// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rust-native-wasm-loader loads a cargo-web project: dependencies 1`] = `
Set {
  "test/fixtures/mystdweblib/Cargo.toml",
  "test/fixtures/mystdweblib/src/main.rs",
  "test/fixtures/stdweb.js",
}
`;

exports[`rust-native-wasm-loader loads a cargo-web project: errors 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a cargo-web project: output 1`] = `"Hello, World!"`;

exports[`rust-native-wasm-loader loads a cargo-web project: warnings 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a simple cargo project with errors: dependencies 1`] = `
Set {
  "test/fixtures/error.js",
  "test/fixtures/myerrorlib/Cargo.toml",
  "test/fixtures/myerrorlib/src/lib.rs",
}
`;

exports[`rust-native-wasm-loader loads a simple cargo project with errors: errors 1`] = `
Array [
  "Module build failed: BuildError: Cargo build failed",
  "error: aborting due to previous error

",
  "error[E0277]: cannot add \`&str\` to \`{integer}\`
 --> src/lib.rs:2:7
  |
2 |     1 + \\"two\\"
  |       ^ no implementation for \`{integer} + &str\`
  |
  = help: the trait \`std::ops::Add<&str>\` is not implemented for \`{integer}\`

If you want more information on this error, try using \\"rustc --explain E0277\\"
",
]
`;

exports[`rust-native-wasm-loader loads a simple cargo project with errors: failure 1`] = `"Module build failed: BuildError: Cargo build failed"`;

exports[`rust-native-wasm-loader loads a simple cargo project with errors: warnings 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a simple cargo project with warnings: dependencies 1`] = `
Set {
  "test/fixtures/mywarninglib/Cargo.toml",
  "test/fixtures/mywarninglib/src/lib.rs",
  "test/fixtures/warning.js",
}
`;

exports[`rust-native-wasm-loader loads a simple cargo project with warnings: errors 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a simple cargo project with warnings: output 1`] = `1`;

exports[`rust-native-wasm-loader loads a simple cargo project with warnings: warnings 1`] = `
Array [
  "warning: unused variable: \`b\`
 --> src/lib.rs:2:20
  |
2 | pub fn add(a: i32, b: i32) -> i32 { // Warning: unused variable b
  |                    ^ help: consider using \`_b\` instead
  |
  = note: #[warn(unused_variables)] on by default

",
]
`;

exports[`rust-native-wasm-loader loads a simple cargo project with wasm-gc: dependencies 1`] = `
Set {
  "test/fixtures/myrustlib/Cargo.toml",
  "test/fixtures/myrustlib/src/add.rs",
  "test/fixtures/myrustlib/src/lib.rs",
  "test/fixtures/simple.js",
}
`;

exports[`rust-native-wasm-loader loads a simple cargo project with wasm-gc: errors 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a simple cargo project with wasm-gc: output 1`] = `3`;

exports[`rust-native-wasm-loader loads a simple cargo project with wasm-gc: warnings 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a simple cargo project: dependencies 1`] = `
Set {
  "test/fixtures/myrustlib/Cargo.toml",
  "test/fixtures/myrustlib/src/add.rs",
  "test/fixtures/myrustlib/src/lib.rs",
  "test/fixtures/simple.js",
}
`;

exports[`rust-native-wasm-loader loads a simple cargo project: errors 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a simple cargo project: output 1`] = `3`;

exports[`rust-native-wasm-loader loads a simple cargo project: warnings 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support and a rust error: dependencies 1`] = `
Set {
  "node_modules/@types/node/index.d.ts",
  "node_modules/@types/node/inspector.d.ts",
  "node_modules/typescript/lib/lib.d.ts",
  "test/fixtures/mywasmbindgenerrorlib/src/lib.rs",
  "test/fixtures/mywasmbindgenlib/target/wasm32-unknown-unknown/release/mywasmbindgenlib.d.ts",
  "test/fixtures/wasmbindgen-rust-error.ts",
}
`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support and a rust error: errors 1`] = `
Array [
  "[tsl] ERROR in test/fixtures/wasmbindgen-rust-error.ts(1,33)
      TS2306: File 'test/fixtures/mywasmbindgenerrorlib/src/lib.rs.ts' is not a module.",
  "Cargo build failed",
  "error: aborting due to previous error

",
  "error[E0369]: binary operation \`+\` cannot be applied to type \`&str\`
  --> src/lib.rs:10:5
   |
10 |     a + b
   |     ^^^^^ \`+\` can't be used to concatenate two \`&str\` strings
help: \`to_owned()\` can be used to create an owned \`String\` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left
   |
10 |     a.to_owned() + b
   |     ^^^^^^^^^^^^

If you want more information on this error, try using \\"rustc --explain E0369\\"
",
]
`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support and a rust error: failure 1`] = `"Cargo build failed"`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support and a rust error: warnings 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support and a type error: dependencies 1`] = `
Set {
  "node_modules/@types/node/index.d.ts",
  "node_modules/@types/node/inspector.d.ts",
  "node_modules/typescript/lib/lib.d.ts",
  "test/fixtures/mywasmbindgenlib/src/lib.rs",
  "test/fixtures/mywasmbindgenlib/target/wasm32-unknown-unknown/release/mywasmbindgenlib.d.ts",
  "test/fixtures/mywasmbindgenlib/target/wasm32-unknown-unknown/release/mywasmbindgenlib.js",
  "test/fixtures/mywasmbindgenlib/target/wasm32-unknown-unknown/release/mywasmbindgenlib_bg.js",
  "test/fixtures/wasmbindgen-type-error.ts",
}
`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support and a type error: errors 1`] = `
Array [
  "[tsl] ERROR in test/fixtures/wasmbindgen-type-error.ts(5,10)
      TS2554: Expected 2 arguments, but got 3.",
]
`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support and a type error: output 1`] = `"Hello, World!"`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support and a type error: warnings 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support: dependencies 1`] = `
Set {
  "node_modules/@types/node/index.d.ts",
  "node_modules/@types/node/inspector.d.ts",
  "node_modules/typescript/lib/lib.d.ts",
  "test/fixtures/mywasmbindgenlib/src/lib.rs",
  "test/fixtures/mywasmbindgenlib/target/wasm32-unknown-unknown/release/mywasmbindgenlib.d.ts",
  "test/fixtures/mywasmbindgenlib/target/wasm32-unknown-unknown/release/mywasmbindgenlib.js",
  "test/fixtures/mywasmbindgenlib/target/wasm32-unknown-unknown/release/mywasmbindgenlib_bg.js",
  "test/fixtures/wasmbindgen.ts",
}
`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support: errors 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support: output 1`] = `"Hello, World!"`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project with typescript support: warnings 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project: dependencies 1`] = `
Set {
  "test/fixtures/mywasmbindgenlib/Cargo.toml",
  "test/fixtures/mywasmbindgenlib/src/lib.rs",
  "test/fixtures/mywasmbindgenlib/target/wasm32-unknown-unknown/release/mywasmbindgenlib.js",
  "test/fixtures/mywasmbindgenlib/target/wasm32-unknown-unknown/release/mywasmbindgenlib_bg.js",
  "test/fixtures/wasmbindgen.js",
}
`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project: errors 1`] = `Array []`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project: output 1`] = `""`;

exports[`rust-native-wasm-loader loads a wasm-bindgen project: warnings 1`] = `Array []`;
